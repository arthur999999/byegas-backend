generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alarms {
  id        Int      @id(map: "alarms_pk") @default(autoincrement())
  userId    Int
  chainId   Int
  valueGas  Int
  inGwei    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "alarms_fk0")
  chains    chains   @relation(fields: [chainId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "alarms_fk1")
}

model chains {
  id        Int         @id(map: "chains_pk") @default(autoincrement())
  name      String      @unique
  apiGas    String
  image     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  alarms    alarms[]
  comments  comments[]
  favorites favorites[]
  tokens    tokens[]
}

model comments {
  id        Int      @id(map: "comments_pk") @default(autoincrement())
  userId    Int
  chainId   Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_fk0")
  chains    chains   @relation(fields: [chainId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_fk1")
}

model favorites {
  id        Int      @id(map: "favorites_pk") @default(autoincrement())
  userId    Int
  chainId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorites_fk0")
  chains    chains   @relation(fields: [chainId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorites_fk1")
}

model image {
  id        Int      @id(map: "image_pk") @default(autoincrement())
  userId    Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "image_fk0")
}

model sessions {
  id        Int      @id(map: "sessions_pk") @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_fk0")
}

model telegram {
  id           Int      @id(map: "telegram_pk") @default(autoincrement())
  userId       Int
  userTelegram String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "telegram_fk0")
}

model tokens {
  id        Int      @id(map: "tokens_pk") @default(autoincrement())
  name      String
  apiToken  String
  chainId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chains    chains   @relation(fields: [chainId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tokens_fk0")
}

model users {
  id        Int         @id(map: "users_pk") @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  alarms    alarms[]
  comments  comments[]
  favorites favorites[]
  image     image[]
  sessions  sessions[]
  telegram  telegram[]
}
